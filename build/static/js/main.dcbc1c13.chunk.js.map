{"version":3,"sources":["Words.js","App.js","index.js"],"names":["AnswerSet","getRandomAnswer","Math","floor","random","length","App","props","handleKeyPress","e","key","toUpperCase","match","makeGuess","tmpAnswer","state","answer","remainingGuesses","lettersGuessed","answerSoFar","repeat","window","addEventListener","this","setState","letter","getGameStatus","includes","shouldDecGuesses","tmp","i","tmpLettersGuessed","push","tmpRemainingGuesses","join","gameStatus","className","onClick","resetGame","renderGameOver","React","Component","ReactDOM","render","document","getElementById"],"mappings":"mOAAMA,G,MAAY,CACd,YACA,aACA,aACA,aACA,aACA,cACA,WACA,gBAOWC,MAJf,WACI,OAAOD,EAAUE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAUK,U,OCoG3CC,E,kDA3Gb,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IAiBRC,eAAiB,SAACC,GAChB,IAAMC,EAAMD,EAAEC,IAAIC,cACFD,EAAIE,MAAM,YAExB,EAAKC,UAAUH,IApBjB,IAAII,EAAYb,IAAkBU,cAFjB,OAGjB,EAAKI,MAAQ,CACXC,OAAQF,EACRG,iBAAkB,EAClBC,eAAgB,GAChBC,YAAa,IAAIC,OAAON,EAAUT,SAPnB,E,qDAWnB,WAAqB,IAAD,OAClBgB,OAAOC,iBAAiB,WAAW,SAACb,GAC9BA,EAAEW,QACN,EAAKZ,eAAeC,Q,uBAYxB,WACE,IAAIK,EAAYb,IAAkBU,cAClCY,KAAKC,SAAS,CACZR,OAAQF,EACRG,iBAAkB,EAClBC,eAAgB,GAChBC,YAAa,IAAIC,OAAON,EAAUT,Y,uBAItC,SAAUoB,GACR,GAA6B,YAAzBF,KAAKG,gBAAT,CADgB,MAGgDH,KAAKR,MAA9DC,EAHS,EAGTA,OAAQC,EAHC,EAGDA,iBAAkBC,EAHjB,EAGiBA,eAAgBC,EAHjC,EAGiCA,YAEjD,IAAKD,EAAeS,SAASF,GAAS,CAGpC,IAFA,IAAIG,GAAmB,EACnBC,EAAG,YAAOV,GACLW,EAAI,EAAGA,EAAId,EAAOX,OAAQyB,IAC7Bd,EAAOc,KAAOL,IAChBI,EAAIC,GAAKL,EACTG,GAAmB,GAIvB,IAAIG,EAAiB,YAAOb,GAC5Ba,EAAkBC,KAAKP,GAEvB,IAAIQ,EAAsBhB,EACtBW,GACFK,IAGFV,KAAKC,SAAS,CAACN,eAAgBa,EAAmBd,iBAAkBgB,EAAqBd,YAAaU,EAAIK,KAAK,U,2BAInH,WAAiB,IAAD,EACkCX,KAAKR,MAA9CC,EADO,EACPA,OAAQC,EADD,EACCA,iBAEf,OAHc,EACmBE,cAEbH,EACX,UACEC,GAAoB,EACtB,SAEF,Y,4BAGT,WAAkB,IAAD,OACTkB,EAAaZ,KAAKG,gBAExB,OACE,sBAAKU,UAAU,YAAf,UACE,qBAAIA,UAAU,aAAd,UAA4BD,EAA5B,OACA,0CAAaZ,KAAKR,MAAMC,UACxB,wBAAQqB,QAAS,kBAAM,EAAKC,aAA5B,yBACA,4B,oBAKN,WAAU,IAAD,EACiDf,KAAKR,MAAtDE,EADA,EACAA,iBAAkBC,EADlB,EACkBA,eAAgBC,EADlC,EACkCA,YACnCgB,EAAaZ,KAAKG,gBAExB,OACE,sBAAKU,UAAU,MAAf,UACkB,YAAfD,EAA2BZ,KAAKgB,iBAAmB,KACpD,yCACA,mDAHF,IAG6BtB,EAE3B,qBAAKmB,UAAU,WAAf,SACGjB,IAGH,iDATF,IAS2BD,EAAegB,KAAK,a,GAtGnCM,IAAMC,WCCxBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.dcbc1c13.chunk.js","sourcesContent":["const AnswerSet = [\n    'Workforce',\n    'Management',\n    'LaborChart',\n    'Javascript',\n    'Typescript',\n    'Programming',\n    'Software',\n    'Engineering',\n]\n\nfunction getRandomAnswer() {\n    return AnswerSet[Math.floor(Math.random() * AnswerSet.length)];\n}\n\nexport default getRandomAnswer;","import React from 'react';\nimport './App.css';\nimport getRandomAnswer from './Words';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    let tmpAnswer = getRandomAnswer().toUpperCase();\n    this.state = {\n      answer: tmpAnswer,\n      remainingGuesses: 6,\n      lettersGuessed: [],\n      answerSoFar: \"_\".repeat(tmpAnswer.length),\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', (e) => {\n      if (e.repeat) return;\n      this.handleKeyPress(e);\n    });\n  }\n\n  handleKeyPress = (e) => {\n    const key = e.key.toUpperCase();\n    const isValid = key.match(/^[A-Z]$/);\n    if (isValid) {\n      this.makeGuess(key);\n    }\n  }\n\n  resetGame() {\n    let tmpAnswer = getRandomAnswer().toUpperCase();\n    this.setState({\n      answer: tmpAnswer,\n      remainingGuesses: 6,\n      lettersGuessed: [],\n      answerSoFar: \"_\".repeat(tmpAnswer.length),\n    });\n  }\n\n  makeGuess(letter) {\n    if (this.getGameStatus() !== 'playing') return;\n\n    const {answer, remainingGuesses, lettersGuessed, answerSoFar} = this.state;\n\n    if (!lettersGuessed.includes(letter)) {\n      let shouldDecGuesses = true;\n      let tmp = [...answerSoFar];\n      for (let i = 0; i < answer.length; i++) {\n        if (answer[i] === letter) {\n          tmp[i] = letter;\n          shouldDecGuesses = false;\n        }\n      }\n\n      let tmpLettersGuessed = [...lettersGuessed];\n      tmpLettersGuessed.push(letter);\n\n      let tmpRemainingGuesses = remainingGuesses;\n      if (shouldDecGuesses) { \n        tmpRemainingGuesses-- \n      };\n\n      this.setState({lettersGuessed: tmpLettersGuessed, remainingGuesses: tmpRemainingGuesses, answerSoFar: tmp.join('')});\n    }\n  }\n\n  getGameStatus() {\n    const {answer, remainingGuesses, answerSoFar} = this.state;\n\n    if (answerSoFar === answer) {\n      return 'victory';\n    } else if (remainingGuesses <= 0) {\n      return 'defeat';\n    }\n    return 'playing';\n  }\n\n  renderGameOver() {\n    const gameStatus = this.getGameStatus();\n\n    return (\n      <div className='game_over'>\n        <h1 className='capitalize'>{gameStatus}!</h1>\n        <h3>Answer: {this.state.answer}</h3>\n        <button onClick={() => this.resetGame()}>Play again?</button>\n        <hr />\n      </div>\n    );\n  }\n\n  render() {\n    const {remainingGuesses, lettersGuessed, answerSoFar} = this.state;\n    const gameStatus = this.getGameStatus();\n\n    return (\n      <div className=\"App\">\n        {gameStatus !== 'playing' ? this.renderGameOver() : null}\n        <h1>Hangman</h1>\n        <b>Guesses remaining:</b> {remainingGuesses}\n\n        <div className='progress'>\n          {answerSoFar}\n        </div>\n\n        <b>Letters guessed:</b> {lettersGuessed.join(\", \")}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}